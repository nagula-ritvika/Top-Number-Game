{"version":3,"sources":["TopNumber.js","Display.js","helpers.js","Target.js","App.js","serviceWorker.js","index.js"],"names":["TopNumber","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","highest","inherits","createClass","key","value","nextProps","nextState","document","body","style","background","game","number","setState","react_default","a","createElement","React","Component","fontSize","color","top","Display","random","min","max","r","Math","floor","clone","obj","newObj","prop","hasOwnProperty","Target","apply","arguments","visibility","position","left","cursor","className","fieldStyle","width","height","App","createTarget","ms","intervals","push","setInterval","targets","num","bind","assertThisInitialized","hitTarget","e","target","parseInt","innerText","toFixed","latestClick","startGame","endGame","forEach","int","clearInterval","prevProps","prevState","buttonStyle","display","Target_Target","TopNumber_TopNumber","Display_Display","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.85913fde.chunk.js","sourcesContent":["import React from \"react\";\nconst yellow = \"rgb(255, 215, 18)\";\n\nexport class TopNumber extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { highest: 0 };\n  }\n\n  componentWillUpdate(nextProps, nextState) {\n    if (\n      document.body.style.background !== yellow &&\n      this.state.highest >= 950 * 1000\n    ) {\n      document.body.style.background = yellow;\n    } else if (!this.props.game && nextProps.game) {\n      document.body.style.background = \"white\";\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.number > this.state.highest) {\n      this.setState({\n        highest: nextProps.number\n      });\n    }\n  }\n\n  render() {\n    return <h1>Top Number: {this.state.highest}</h1>;\n  }\n}\n\nTopNumber.propTypes = {\n  //   number: React.PropTypes.number,\n  //   game: React.PropTypes.bool\n};\n","import React from \"react\";\n\nconst style = {\n  fontSize: 110,\n  color: \"lightgrey\",\n  //   position: \"absolute\",\n  top: \"30%\"\n};\n\nexport const Display = props => {\n  return <div style={style}>{props.number}</div>;\n};\n\n// Display.propTypes = {\n//   number: React.PropTypes.number.isRequired\n// };\n","export let random = (min, max) => {\n  let r = Math.random();\n  return Math.floor(r * (max - min) + min);\n};\n\nexport let clone = obj => {\n  let newObj = {};\n  for (let prop in obj) {\n    if (obj.hasOwnProperty(prop)) {\n      newObj[prop] = obj[prop];\n    }\n  }\n  return newObj;\n};\n","import React from \"react\";\nimport { random } from \"./helpers\";\n\nexport class Target extends React.Component {\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.props.number !== nextProps.number;\n  }\n    \n  render() {\n    let visibility = this.props.number ? \"visible\" : \"hidden\";\n    let style = {\n      position: \"absolute\",\n      left: random(0, 100) + \"%\",\n      top: random(0, 100) + \"%\",\n      fontSize: 40,\n      cursor: \"pointer\",\n      visibility: visibility\n    };\n\n    return (\n      <span style={style} className=\"target\">\n        {this.props.number}\n      </span>\n    );\n  }\n}\n\n// Target.propTypes = {\n//   number: React.PropTypes.number.isRequired\n// };\n","import React, { Component } from \"react\";\nimport { TopNumber } from \"./TopNumber\";\nimport { Display } from \"./Display\";\nimport { Target } from \"./Target\";\nimport { random, clone } from \"./helpers\";\nimport \"./App.css\";\n\nconst fieldStyle = {\n  position: \"absolute\",\n  width: \"40%\",\n  // bottom: 20,\n  left: \"30%\",\n  height: \"60%\"\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      game: false,\n      targets: {},\n      latestClick: 0\n    };\n\n    this.intervals = null;\n\n    this.hitTarget = this.hitTarget.bind(this);\n    this.startGame = this.startGame.bind(this);\n    this.endGame = this.endGame.bind(this);\n  }\n\n  createTarget = (key, ms) => {\n    ms = ms || random(500, 2000);\n    this.intervals.push(\n      setInterval(\n        function() {\n          let targets = clone(this.state.targets);\n          let num = random(1, 1000 * 1000);\n          targets[key] = targets[key] !== 0 ? 0 : num;\n          this.setState({ targets: targets });\n        }.bind(this),\n        ms\n      )\n    );\n  };\n\n  hitTarget = e => {\n    if (e.target.className !== \"target\") return;\n    let num = parseInt(e.target.innerText);\n    for (let target in this.state.targets) {\n      let key = Math.random().toFixed(4);\n      this.createTarget(key);\n    }\n    this.setState({ latestClick: num });\n  };\n\n  startGame = () => {\n    this.createTarget(\"first\", 750);\n    this.setState({\n      game: true\n    });\n  };\n\n  endGame = () => {\n    this.intervals.forEach(int => {\n      clearInterval(int);\n    });\n    this.intervals = [];\n    this.setState({\n      game: false,\n      targets: {},\n      latestClick: 0\n    });\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.latestClick < prevState.latestClick) {\n      this.endGame();\n    }\n  }\n\n  componentWillMount() {\n    this.intervals = [];\n  }\n\n  render() {\n    let buttonStyle = {\n      display: this.state.game ? \"none\" : \"inline-block\"\n    };\n    let targets = [];\n    for (let key in this.state.targets) {\n      targets.push(<Target number={this.state.targets[key]} key={key} />);\n    }\n    return (\n      <div>\n        <TopNumber number={this.state.latestClick} game={this.state.game} />\n        <Display number={this.state.latestClick} />\n        <button onClick={this.startGame} style={buttonStyle}>\n          New Game\n        </button>\n        <div style={fieldStyle} onClick={this.hitTarget}>\n          {targets}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}